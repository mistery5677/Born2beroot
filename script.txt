
----> ARCHITECTURE <----

uname -a ou --all --> Prints all the information, except if the CPU is unknow or the platform hardware.

----> PHYSICAL CORES <----

grep "physical id" /proc/cpuinfo | wc -l: This command will find how many times we find the string "physical id, and returns the mount of times that is used.

	Grep --> Search text with defined criteria of Words or Strings;
	wc -l --> Word Count;

----> VIRTUAL CORES <----

grep processor /proc/cpuinfo | wc -l: This command finds how many times we find the "processor" on the file

----> RAM <----

free --mega: This shows the information about the RAM in Megabytes: To see the RAM usage 
	free --> Displays the RAM used;
	--mega --> Displays the values in Megabytes.

free --mega | awk '$1 == "Mem:" {print $3}': Show us all the alocatted memory
	| --> This symbol '|' its a pipe, that we transfer the information of the first sentece, to the next one.
	awk --> This is a tool that process the text, and manipulates the data
	$1 == "Mem:" {print $3}' --> This checks the first collumn of the line is equal to 'Mem', if it is, prints the third collumn of that line

free --mega | awk '$1 == "Mem:" {printf("(%.2f%%)\n", $3/$2*100)}': Does the same thing of the previous command, but only prints 2 decimals.

----> DISK MEMORY <----

df -m | grep "/dev/" | grep -v "/boot" | awk '{memory_use += $3} END {print memory_use}': Show the occupied memory.
	df -m --> Stands for "disk filesystem", is used to get the summary of the use of the disk, and display in Megabytes cause of '-m' flag
	grep "/dev/" --> Filters the output to include only lines that contain "/dev/"
	grep -v "/boot" --> Does the same thing, but inverts with the '-v' flag, so we get all lines that doesn't contain "/boot".
	awk '{memory_use += $3} END {print memory_use}' --> awk will process all the value, and incrementate with the value in the third collumn, and at the 'END' will print the information

df -m | grep "/dev/" | grep -v "/boot" | awk '{memory_result += $2} END {printf ("%.0Gb\n"), memory_result/1024}': Show the memory in GB

df -m | grep "/dev/" | grep -v "/boot" | awk '{use += $3} {total += $2} END {printf("(%d%%)\n"), use/total*100}': Show the memory in percent

----> CPU USAGE PERCENTAGE <----

vmstat 1 4 | tail -1 | awk '{print $15}': 
	vmstat 1 4 --> Shows system statistics, allowing us to obtain a general detail of the processes, memory usage, CPU activity, system status, etc, with 1 - 4 seconds.
	tail -1 --> Produce the outpu on the last line
	awk '{print $15}' --> Only print the word 15

----> LAST REBOOT <----

who -b | awk '$1 == "system" {print $3 " " $4}': Show the last reboot
	who -b --> This command displays the last time that we've bootted;
	awk '$1 == "system" --> Verify if the first word is system
	{print $3 " " $4} --> If it is 'system' prints the 'third' and 'fourth' information

----> LVM ACTIVE <----

if [ $(lsblk | grep "lvm" | wc -l) -gt 0 ]; then echo yes; else echo no; fi: It will check if it is a LVM, if it is, will print "yes" or it will print "no"
	if --> It will do something, if it is true.
	$(lsblk | grep "lvm" | wc -l) --> It will check, in the information provided by "lsblk", if it finds "lvm", and counts how many times he found the word;
	-gt 0 --> It means "Greater Than" 0 ... this complemment the 'if' statemment.
	then echo yes --> Prints 'yes' if the 'if' statemment its true.
	else echo no --> Prints 'no' if the condition is false.

----> TCP CONNECTIONS <----

ss -ta | grep ESTAB | wc -l: Show the amoount of TCP connections activated on the system
	ss --> Display information about network connetcion and system sockets
	-ta --> '-t' Filter for TCP cpnnections | 'a' includes disabled connections 
	ss -ta --> Show TCP connections, either the ones that are disabled
	gerp ESTAB --> Display only TCP connections that are on ESTABLISHED mode
	wc -l --> Line count

----> NUMBER OF USERS <----

users | wc -w: Count the USERS

----> IP ADDRESS & MAC <----

ip link | grep "link/ether" | awk '{print $2}': This will display all MAC addresses of the Network.
	ip link --> Display and manipulate network devices
	grep "link/ether" --> Find lines with "link/ether", normally shows informations about MAC address
	awk '{print $2}' --> Prints the second field of each line.

----> NUMBER OF COMMANDS EXECUTED ON SUDO <----

journalctl _COMM=sudo | grep COMMAND | wc -l: 
	journalctl --> Its a command to query and display logs from 'journald' (the systemd journal service)
	_COMM=sudo --> Filters the logs to show, this mean it will display log entries related to the 'sudo'
	grep COMMAND --> Search for lines containing "COMMAND"
	wc -l --> Counts the number of lines output by the 'grep COMMAND'

----> STEPS <----

1 - Create the virtual machine;
2 - Create the admin account (miafonso2);
3 - Create the user (miafonso);
4 - Create the encrypted phrase to access the VM;
5 - Create the partissions
6 - Install 'sudo'
7 - Create the group 'user42' (sudo addgroup user42);
8 - And the user (miafonso) to the 'sudo' and 'user42' group (sudo adduser miafonso user42/sudo);
9 - Install 'ssh' services (sudo apt intall openssh-server);
10 - Use (nano /etc/ssh/sshd_config) to change '#Port 22' to 'Port 4242', and change '#PermitRootLogin prohibit-password' to 'PermitRootLogin no'
11 - Install UFW (Uncomplicated FireWall) (sudo apt install ufw);
	11.1 - Enable UFW; (sudo ufw enable)
	11.2 - Allow port 4242; (sudo ufw allow 4242)

12 - Set up the sudo polices (touch /etc/sudoers.d/sudo_config) (mkdir /var/log/sudo)
	12.1 - Creates the directory for each command needs to be logged (mkdir /var/log/sudo)
	12.3 -  Edit the file to put all commands;
		12.3.1 - Defaults  passwd_tries=3 --> Total tries for 'sudo password';
		12.3.2 - Defaults  badpass_message="Mensaje de error personalizado" --> The massage when password is wrong;
		12.3.3 - Defaults  logfile="/var/log/sudo/sudo_config" --> Path where will the sudo logs will be stored;
		12.3.4 - Defaults  log_input, log_output --> What will be logged;
		12.3.5 - Defaults  iolog_dir="/var/log/sudo" --> what will be logged;
		12.3.6 - Defaults  requiretty --> The terminal to sign in;
		12.3.7 - Defaults  secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin" --> The folder path that will be executed of sudo;

13 - Set up the password Policy
	13.1 - Enter in '/etc/login.defs', and change 'PASS_MAX_DAYS 99999 -> PASS_MAX_DAYS 30' and 'PASS_MIN_DAYS 0 -> PASS_MIN_DAYS 2' 
		13.1.1 PASS_MAX_DAYS --> Max days till password expiration;
		13.1.2 PASS_MIN_DAYS --> Min days till password change;
		13.1.3 PASS_WARN_AGE --> Days till password warning.
	13.2 - Install 'libpam-pwquality' (sudo apt install libpam-pwquality), package that checks the password security.
	13.3 - Create the password policys on (nano /etc/pam.d/common-password)
		13.3.1 minlen=10 --> The minimun characters a password must contain
		13.3.1 ucredit=-1 --> The password needs to contain at least a capital letter;
		13.3.1 dcredit=-1 -->  The pass needs to contain a a digit;
		13.3.1 lcredit=-1 -->  The pass needs to contain a lowercase letter;
		13.3.1 maxrepeat=3 --> The pass can't have the same character repited three contiusly times
		13.3.1 reject_username --> The pass cant conain the usern inside itself
		13.3.1 difok=7 --> The pass it have to contain at least seven diferent characters from the last password ussed
		13.3.1 enforce_for_root --> We will implement this pass policy to root.

14 - Connect VM to the real machine.


----> COMMANDS <----

sudo service ssh status --> Show how is the state of SSH;
getent group <groupname> --> Show all users on the group;
sudo ufw status --> Show the UFW stauts, like the ports that are available;
sudo chage -l <username> --> See the passwd pollicy
sudo adduser <username> --> Add an user
